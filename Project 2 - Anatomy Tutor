import netP5.*;

/*
    TUIO processing demo - part of the reacTIVision project
    http://reactivision.sourceforge.net/

    Copyright (c) 2005-2009 Martin Kaltenbrunner <mkalten@iua.upf.edu>
*/

// we need to import the TUIO library
// and declare a TuioProcessing client variable
import TUIO.*;
TuioProcessing tuioClient;
import java.util.*; 

// these are some helper variables which are used
// to create scalable graphical feedback
float cursor_size = 15;
float object_size = 60;
float table_size = 760;
float scale_factor = 1;
PFont font;

PImage img0;
PImage img1;
PImage img2;
PImage img3;
PImage img4;
PImage img5;

PImage img6;
PImage img7; 
PImage img8;
PImage img9;
PImage img10;

PImage img11;
PImage img12; 
PImage img13; 

void setup()
{
  //size(screen.width,screen.height);
  size(1250,680);
  noStroke();
  fill(0);
  img0 = loadImage("Chalk Board.jpg");
  
  img1 = loadImage("Inhale.jpg");
  img2 = loadImage("Exhale.jpg");
  img3 = loadImage("Resp Arrows.jpg");
  img4 = loadImage("Alveloar Sac.jpg");
  img5 = loadImage("Sac Flow.jpg");
  
  img6 = loadImage("Triceps Contracted.jpg");
  img7 = loadImage("Biceps Contracted.jpg");
  img8 = loadImage("Muscle Fiber.jpg");
  img9 = loadImage("Before Contraction.jpg");
  img10 = loadImage("After Contraction.jpg");
  
  img11 = loadImage("Reflex1.jpg");
  img12 = loadImage("Reflex2.jpg");
  img13 = loadImage("Reflex3.jpg");
  
  loop();
  frameRate(30);
  //noLoop();
  
  font = createFont("Chalkboard-Bold", 50);
  scale_factor = height/table_size;
  
  // we create an instance of the TuioProcessing client
  // since we add "this" class as an argument the TuioProcessing class expects
  // an implementation of the TUIO callback methods (see below)
  tuioClient  = new TuioProcessing(this);
}

// within the draw method we retrieve a Vector (List) of TuioObject and TuioCursor (polling)
// from the TuioProcessing client and then loop over both lists to draw the graphical feedback.
void draw()
{
  background(20,90,73);
  textFont(font,40*scale_factor);
  float obj_size = object_size*scale_factor; 
  float cur_size = cursor_size*scale_factor; 
   fill(255);
   text("Test the objects in the box to learn about Anatomy and Physiology",30,20,1300,400);
  text("Please return objects to their original position after each use",75,80,1300,400);
      image(img0,320,190);
   
  Vector tuioObjectList = tuioClient.getTuioObjects();
  for (int i=0;i<tuioObjectList.size();i++) {
     TuioObject tobj = (TuioObject)tuioObjectList.elementAt(i);
     stroke(0);
     fill(0);
     pushMatrix();
     translate(tobj.getScreenX(width),tobj.getScreenY(height));
     rotate(tobj.getAngle());
     //rect(-obj_size/2,-obj_size/2,obj_size,obj_size);
     popMatrix();
     //fill(255);
     //text(""+tobj.getSymbolID(), tobj.getScreenX(width), tobj.getScreenY(height));
 
     
      if(tobj.getSymbolID()==186)
     {
     fill(20,90,73);
     rect(0,0,1250,680);
     fill(246,255,13);
     text("Respiration",50,50, 200, 200); 
     text("Hint: Try the L and R arrow keys",600,50, 600, 200); 
     image(img1,50,150);
     image(img3,350,100);
     image(img4,900,150);
     if(keyPressed && (key == CODED)){
       if (keyCode == LEFT){
         image(img2,45,150);
     }
     else if (keyCode == RIGHT) {
      image (img5,850,300);
  }
     }
     }
     
     if(tobj.getSymbolID()==187)
     {
      fill(20,90,73);
       rect(0,0,1250,680);
       fill(246,255,13);
     text("Muscle Contraction",600,50, 400, 200); 
     text("Hint: Try the L and R arrow keys",600,100, 600, 200); 
     image(img6,50,20);
     image(img8,30,300);
     image(img9,500,250);
     if(keyPressed && (key == CODED)){
       if (keyCode == LEFT){
         image(img7,50,20);
     }
     else if (keyCode == RIGHT) {
       fill(20,90,73); 
       rect(500,250,900,500);
       image (img10,500,250);
  }
     }
     }
     
      if(tobj.getSymbolID()==188)
     {
      //fill(20,90,73);
       //rect(0,0,1250,680);
       fill(246,255,13);
       image(img11,0,0);
     if(keyPressed && (key == CODED)){
       if (keyCode == LEFT){
         image(img12,0,0);
     }
     else if (keyCode == RIGHT) {
       image (img13,0,0);
  }
     }
     text("Reflex Arc",550,30, 200, 200);  
     text("Hint: Try the L and R arrow keys",600,580, 600, 200);
  }
  }
   
   Vector tuioCursorList = tuioClient.getTuioCursors();
   for (int i=0;i<tuioCursorList.size();i++) {
      TuioCursor tcur = (TuioCursor)tuioCursorList.elementAt(i);
      Vector pointList = tcur.getPath();
      
      if (pointList.size()>0) {
        stroke(0,0,255);
        TuioPoint start_point = (TuioPoint)pointList.firstElement();;
        for (int j=0;j<pointList.size();j++) {
           TuioPoint end_point = (TuioPoint)pointList.elementAt(j);
           line(start_point.getScreenX(width),start_point.getScreenY(height),end_point.getScreenX(width),end_point.getScreenY(height));
           start_point = end_point;
        }
        
        stroke(192,192,192);
        fill(192,192,192);
        ellipse( tcur.getScreenX(width), tcur.getScreenY(height),cur_size,cur_size);
        fill(0);
        text(""+ tcur.getCursorID(),  tcur.getScreenX(width)-5,  tcur.getScreenY(height)+5);
      }
   }
   
}

// these callback methods are called whenever a TUIO event occurs

// called when an object is added to the scene
void addTuioObject(TuioObject tobj) {
  println("add object "+tobj.getSymbolID()+" ("+tobj.getSessionID()+") "+tobj.getX()+" "+tobj.getY()+" "+tobj.getAngle());
}

// called when an object is removed from the scene
void removeTuioObject(TuioObject tobj) {
  println("remove object "+tobj.getSymbolID()+" ("+tobj.getSessionID()+")");
}

// called when an object is moved
void updateTuioObject (TuioObject tobj) {
  println("update object "+tobj.getSymbolID()+" ("+tobj.getSessionID()+") "+tobj.getX()+" "+tobj.getY()+" "+tobj.getAngle()
          +" "+tobj.getMotionSpeed()+" "+tobj.getRotationSpeed()+" "+tobj.getMotionAccel()+" "+tobj.getRotationAccel());
}

// called when a cursor is added to the scene
void addTuioCursor(TuioCursor tcur) {
  println("add cursor "+tcur.getCursorID()+" ("+tcur.getSessionID()+ ") " +tcur.getX()+" "+tcur.getY());
}

// called when a cursor is moved
void updateTuioCursor (TuioCursor tcur) {
  println("update cursor "+tcur.getCursorID()+" ("+tcur.getSessionID()+ ") " +tcur.getX()+" "+tcur.getY()
          +" "+tcur.getMotionSpeed()+" "+tcur.getMotionAccel());
}

// called when a cursor is removed from the scene
void removeTuioCursor(TuioCursor tcur) {
  println("remove cursor "+tcur.getCursorID()+" ("+tcur.getSessionID()+")");
}

// called after each message bundle
// representing the end of an image frame
void refresh(TuioTime bundleTime) { 
  redraw();
}
