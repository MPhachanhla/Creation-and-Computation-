//this code is borrowed from the Nov 13th Android Examples, from the file arduinoBluetooth 
//it reads the incoming value from processing (the dimmer) to change the birghtness of the LED

//we would like to use the voice recognition to turn on and off the LED as next steps once we have worked out the kinks
//this will allow all sounds to come from the bear and allow for the social context of the bear being the child's friend who learns alogn with them

int ledPin = 10;
byte blink2;
byte brightness;
void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);
  
}
void loop() {
  // Display Values Coming from the Android
  analogWrite(ledPin, brightness);  
}
void serialEvent() {
  while (Serial.available()) {
    if (Serial.available() > 1) {
      // Read the incoming byte:
      byte incomingByte = Serial.read();
      if (byte(incomingByte) == '\n') {
        brightness = Serial.read();
        
        while (Serial.available()){
        if (Serial.available() > 1) {
      // Read the incoming byte:
      byte incomingByte = Serial.read();
      if (byte(incomingByte) == '\b') {
        digitalWrite(ledPin, HIGH);
        delay(100);
        digitalWrite(ledPin, LOW);
        delay(200);
        digitalWrite(ledPin, HIGH);
        delay(100);
        digitalWrite(ledPin, LOW);
        delay(200);
        digitalWrite(ledPin, HIGH);
        delay(100);
        digitalWrite(ledPin, LOW);
        delay(200);
        
        
      }
    }
  }
}
  }
}
}

///////////////New Tab: Voice Recognition
//original code taken from: https://github.com/arjo129/uSpeech
//this code is not used in the final product and is something we are currently playing with
//examples of us playing with it are shown in a separate video 
//we would like to incorporate the voice recognition as part of our next steps

VOICE RECOGNITION : 
#include <uspeech.h>
#define led 13
signal voice(A0);
 #define SILENCE 1200
 #define F_CONSTANT 359
String collvoice;
char prev;
//boolean newline=false;
int sum = 0;
boolean LightState;
void setup(){
  voice.calibrate();
  Serial.begin(9600);
  pinMode(led, OUTPUT);
}
void loop()
{
voice.sample();
    char p = voice.getPhoneme();
    if(p!=' '){
      if((p=='f')){
        LightState = true;
      }
    /*  
      voice.sample();
    char p = voice.getPhoneme();
    if(p!=' '){
      if((p=='o')){
        LightState = true;
      }
  
    }
  */
  digitalWrite(led, LightState);  
    }
}


///////////////New Tab: Physical Pixel MP3

//the code below is modified from the arduino physical pixel example and substituted mp3 files for an LED

//although we had sound come out (as demonstrated in the video), the sound was not clean enough to include in the final product 
//this component of processing to arduino mp3 is something we would like to include as next steps for the final part and have all sounds come from the teddybear (arduino)
//we believe the problem is that we could not find a micro SD card that was small enough (Maximum 1 Gig) to be able to cleanly play the file 
//the smallest size we could find was 8 gigs

/*
  Physical Pixel
 
 An example of using the Arduino board to receive data from the 
 computer.  In this case, the Arduino boards turns on an LED when
 it receives the character 'H', and turns off the LED when it
 receives the character 'L'.
 
 The data can be sent from the Arduino serial monitor, or another
 program like Processing (see code below), Flash (via a serial-net
 proxy), PD, or Max/MSP.
 
 The circuit:
 * LED connected from digital pin 13 to ground
 
 created 2006
 by David A. Mellis
 modified 30 Aug 2011
 by Tom Igoe and Scott Fitzgerald
 
 This example code is in the public domain.
 http://www.arduino.cc/en/Tutorial/PhysicalPixel
 */
//const int ledPin = 10; // the pin that the LED is attached to
#include <SPI.h>
#include <SdFat.h>
#include <SdFatUtil.h> 
#include <SFEMP3Shield.h>
SdFat sd;
SFEMP3Shield MP3player;
int incomingByte;      // a variable to read incoming serial data into
//int AMP;
void setup() {
  // initialize serial communication:
  Serial.begin(115200);
  // initialize the LED pin as an output:
  //pinMode(AMP, OUTPUT);
}
void loop() {
  
  // see if there's incoming serial data:
  if (Serial.available() > 0) {
    // read the oldest byte in the serial buffer:
    incomingByte = Serial.read();
    //if it's a capital H (ASCII 72), turn on the LED:
    if (incomingByte == 'H') {
      
      sd.begin(SD_SEL, SPI_HALF_SPEED);
      MP3player.begin();
      MP3player.playTrack(1);
      //Serial.println("play");
     // delay(2000);
     //MP3player.stopTrack();
     //MP3player.stopTrack();
     
     int sensorValue = analogRead(A0);
      Serial.println(sensorValue);
      delay(1);
      Serial.println("it's Working!");
     
     
    //if it's an L (ASCII 76) turn off the LED:
    //if (incomingByte == 'L') {
      //sd.begin(SD_SEL, SPI_HALF_SPEED);
      //MP3player.stopTrack();
      //Serial.println("stop");
      //MP3player.playTrack(1);
    }
    }
  }
  
